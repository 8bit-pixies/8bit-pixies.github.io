---
title: "Evaluating CDFs using SymPy"
author: "pixies"
date: "2023-09-24"
categories: [code]
---

SymPy is pretty useful for symbolic things. One of the items which I was surprised by, was the ability to interrogate and get "closed form" equations (at least to the most simplified symbolic representation) of "unusual" distributions which may not have CDF implementations naturally available. You can then use these representations to evaluate them. For example the [Irwin-Hall](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution) distribution can be addressed as follows:

```py
from sympy.stats import UniformSum, cdf
from sympy import Symbol

n = Symbol("n", integer=True)
uniform_sum = UniformSum("x", n)
x = Symbol("x")
cdf(uniform_sum)(x)
# Piecewise((0, x < 0), (Sum((-1)**_k*(-_k + x)**n*binomial(n, _k), (_k, 0, floor(x)))/factorial(n), n >= x), (1, True))
```

We can evaluate a particular distribution as follows:

```py
cdf(UniformSum("x", 2), evaluate=True)(1.5).doit()
# 0.875
```

One _could_ print out the CDF and rewrite it in some kind of closed form solution, but having something handy like this is quite amazing as there doesn't appear to be many "common" packages that implement this kind of interface. 